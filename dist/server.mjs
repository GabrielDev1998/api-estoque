import M from"express";import C from"cors";import*as l from"firebase-admin";var y=()=>{l.apps.length===0&&l.initializeApp({credential:l.credential.cert({clientEmail:process.env.FIREBASE_CLIENT_EMAIL,privateKey:process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g,`
`),projectId:process.env.FIREBASE_PROJECT_ID})})};import"dotenv/config";import F from"express";import B from"express";function A(){return{verifyToken:async e=>{try{let r=await l.auth().verifyIdToken(e);return{uid:r.uid,email:r.email,iat:r.iat,exp:r.exp}}catch(r){throw console.error("Token inv\xE1lido:",r),new Error("Token inv\xE1lido.")}}}}var E=A;var g=B.Router(),{verifyToken:x}=E();g.get("/",async(a,e)=>{let r=a.headers.authorization;if(!r){e.status(401).json({success:!1,error:"Token n\xE3o fornecido."});return}try{let c=r.split("Bearer ")[1],n=await x(c);e.status(200).json({success:!0,user:n})}catch(c){console.error("Token inv\xE1lido:",c),e.status(401).json({success:!1,error:"Token inv\xE1lido ou expirado."});return}});var w=g;import b from"express";import R,{Schema as L}from"mongoose";import m from"mongoose";var U=async(a,e)=>{try{m.connection.readyState===0?(console.log("Conectando ao MongoDB..."),await m.connect(a,{dbName:e}),console.log(`Conectado ao MongoDB na base de dados "${e}"`)):m.connection.readyState===1?console.log("J\xE1 conectado ao MongoDB"):m.connection.readyState===2?console.log("Conex\xE3o com MongoDB est\xE1 em progresso..."):m.connection.readyState===3&&console.log("Desconectando do MongoDB...")}catch(r){throw console.error("Erro ao se conectar ao banco de dados:",r),new Error("Falha ao se conectar ao banco de dados")}},I=U;var t={INVALID_ID:"ID inv\xE1lido.",DOCUMENT_NOT_FOUND:"Documento n\xE3o encontrado.",CREATE_ERROR:"Erro ao criar documento.",UPDATE_ERROR:"Erro ao atualizar documento.",DELETE_ERROR:"Erro ao excluir documento.",LIST_ERROR:"Erro ao listar documentos."};async function k(a,e,r){let c=process.env.MONGODB_URL;if(!c)throw new Error("Vari\xE1vel de ambiente MONGODB_URL n\xE3o encontrada.");await I(c,a);let n=async()=>{try{return R.models[e]||R.model(e,new L({},{strict:!1}),r)}catch(o){throw console.error("Erro ao validar o modelo",o.message),new Error("Falha ao validar o modelo")}},i=o=>R.Types.ObjectId.isValid(o),d=(o,s)=>{throw console.error(`Erro ao executar opera\xE7\xE3o: ${o}`,s.message),new Error(o)};return{createDocument:async o=>{try{let s=await n();return{success:!0,data:await new s(o).save()}}catch(s){return d(t.CREATE_ERROR,s),{success:!1,error:t.CREATE_ERROR}}},getAllDocument:async()=>{try{return{success:!0,data:await(await n()).find()}}catch(o){return d(t.LIST_ERROR,o),{success:!1,error:t.LIST_ERROR}}},getDocumentById:async o=>{if(!i(o))throw new Error(t.INVALID_ID);try{let u=await(await n()).findById(o);if(!u)throw new Error(t.DOCUMENT_NOT_FOUND);return{success:!0,data:u}}catch(s){return d(t.DOCUMENT_NOT_FOUND,s),{success:!1,error:t.DOCUMENT_NOT_FOUND}}},updateDocumentById:async(o,s)=>{if(!i(o))throw new Error(t.INVALID_ID);try{let D=await(await n()).findByIdAndUpdate(o,s,{new:!0});if(!D)throw new Error(t.DOCUMENT_NOT_FOUND);return{success:!0,data:D}}catch(u){return d(t.UPDATE_ERROR,u),{success:!1,error:t.UPDATE_ERROR}}},deleteDocumentById:async o=>{if(!i(o))throw new Error(t.INVALID_ID);try{let u=await(await n()).findByIdAndDelete(o);if(!u)throw new Error(t.DOCUMENT_NOT_FOUND);return{success:!0,data:u}}catch(s){return d(t.DELETE_ERROR,s),{success:!1,error:t.DELETE_ERROR}}}}}var O=k;var h=b.Router();h.post("/",async(a,e)=>{let{collectionName:r,dbName:c,data:n,nameModel:i}=a.body;if(!c||!i||!n||!r){e.status(400).json({success:!1,error:"Verifique se todos os campos foram informados. (dbName, data, nameModel, collectionName)"});return}try{let{createDocument:d}=await O(c,i,r),T=await d(n);e.status(200).json(T)}catch(d){console.error(d),e.status(500).json({success:!1,error:d.message})}});var _=h;var N=async(a,e,r)=>{let n=a.headers.authorization?.split(" ")[1];if(!n){e.status(401).json({success:!1,error:"Token n\xE3o fornecido"});return}try{let{verifyToken:i}=E();await i(n),r()}catch(i){console.error(i),e.status(401).json({valid:!1,error:"Token inv\xE1lido ou expirado"});return}};var f=F.Router();f.get("/",async(a,e)=>{e.send("API Sequoia")});f.use("/api/verify-token",w);f.use("/api/mongodb/add",N,_);var v=f;var p=M();p.use(C({origin:process.env.ALLOWED_ORIGINS,credentials:!0,methods:["GET","POST","PUT","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization"]}));p.use(M.json());y();p.use("/",v);p.listen(process.env.PORT,()=>{console.log(`API rodando na porta ${process.env.PORT}`)});
