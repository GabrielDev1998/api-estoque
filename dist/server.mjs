import j from"express";import H from"cors";import*as u from"firebase-admin";var T=()=>{u.apps.length===0&&u.initializeApp({credential:u.credential.cert({clientEmail:process.env.FIREBASE_CLIENT_EMAIL,privateKey:process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g,`
`),projectId:process.env.FIREBASE_PROJECT_ID})})};import"dotenv/config";import $ from"express";import L from"express";function U(){return{verifyToken:async e=>{try{let o=await u.auth().verifyIdToken(e);return{uid:o.uid,email:o.email,iat:o.iat,exp:o.exp}}catch(o){throw console.error("Token inv\xE1lido:",o),new Error("Token inv\xE1lido.")}}}}var h=U;var I=L.Router(),{verifyToken:P}=h();I.get("/",async(a,e)=>{let o=a.headers.authorization;if(!o){e.status(401).json({success:!1,error:"Token n\xE3o fornecido."});return}try{let r=o.split("Bearer ")[1],t=await P(r);e.status(200).json({success:!0,user:t})}catch(r){console.error("Token inv\xE1lido:",r),e.status(401).json({success:!1,error:"Token inv\xE1lido ou expirado."});return}});var R=I;import V from"express";import y,{Schema as F}from"mongoose";import g from"mongoose";var C=async(a,e)=>{try{g.connection.readyState===0?(console.log("Conectando ao MongoDB..."),await g.connect(a,{dbName:e}),console.log(`Conectado ao MongoDB na base de dados "${e}"`)):g.connection.readyState===1?console.log("J\xE1 conectado ao MongoDB"):g.connection.readyState===2?console.log("Conex\xE3o com MongoDB est\xE1 em progresso..."):g.connection.readyState===3&&console.log("Desconectando do MongoDB...")}catch(o){throw console.error("Erro ao se conectar ao banco de dados:",o),new Error("Falha ao se conectar ao banco de dados")}},M=C;var m={INVALID_ID:"ID inv\xE1lido.",DOCUMENT_NOT_FOUND:"Documento n\xE3o encontrado.",CREATE_ERROR:"Erro ao criar documento.",UPDATE_ERROR:"Erro ao atualizar documento.",DELETE_ERROR:"Erro ao excluir documento.",LIST_ERROR:"Erro ao listar documentos."};async function k(a,e,o){let r=process.env.MONGODB_URL;if(!r)throw new Error("Vari\xE1vel de ambiente MONGODB_URL n\xE3o encontrada.");console.log(r),await M(r,a);let t=async s=>{try{return y.models[e]||y.model(e,new F(s),o)}catch(i){throw console.error("Erro ao validar o modelo",i.message),new Error("Falha ao validar o modelo")}},c=s=>y.Types.ObjectId.isValid(s),n=(s,i)=>{throw console.error(`Erro ao executar opera\xE7\xE3o: ${s}`,i.message),new Error(s)};return{createDocument:async(s,i)=>{try{let d=await t(s);return await new d(i).save()}catch(d){return n(m.CREATE_ERROR,d),null}},getAllDocument:async()=>{try{return await(await t()).find()}catch(s){n(m.LIST_ERROR,s)}},getDocumentById:async s=>{if(!c(s))throw new Error(m.INVALID_ID);try{let d=await(await t()).findById(s);if(!d)throw new Error(m.DOCUMENT_NOT_FOUND);return d}catch(i){return n(m.DOCUMENT_NOT_FOUND,i),null}},updateDocumentById:async(s,i)=>{if(!c(s))throw new Error(m.INVALID_ID);try{let E=await(await t()).findByIdAndUpdate(s,i,{new:!0});if(!E)throw new Error(m.DOCUMENT_NOT_FOUND);return E}catch(d){n(m.UPDATE_ERROR,d)}},deleteDocumentById:async s=>{if(!c(s))throw new Error(m.INVALID_ID);try{let d=await(await t()).findByIdAndDelete(s);if(!d)throw new Error(m.DOCUMENT_NOT_FOUND);return{id:d._id.toString(),success:!0}}catch(i){n(m.DELETE_ERROR,i)}}}}var f=k;var O=V.Router();O.post("/",async(a,e)=>{let{collectionName:o,schema:r,dbName:t,data:c,nameModel:n}=a.body;if(!r||!c||!t||!n){e.status(400).json({success:!1,error:"Par\xE2metros inv\xE1lidos. Envie schema, data, dbName, nameModel, collectionName (OPCIONAL)"});return}try{let{createDocument:l}=await f(t,n,o),w=await l(r,c);e.json({success:!0,data:w})}catch(l){console.error(l),e.status(500).json({success:!1,error:"Erro ao adicionar documento."})}});var b=O;import q from"express";var N=q.Router();N.get("/all",async(a,e)=>{let{collectionName:o,dbName:r,nameModel:t}=a.query;if(!r||!t||!o){e.status(400).json({success:!1,error:"Algumas dessas informa\xE7\xF5es n\xE3o foram fornecidas: dbName, nameModel e collectionName."});return}try{let{getAllDocument:c}=await f(r,t,o),n=await c();e.json({success:!0,data:n})}catch(c){e.status(500).json({success:!1,error:c.message})}});N.get("/",async(a,e)=>{let{collectionName:o,dbName:r,id:t,nameModel:c}=a.query;if(!r||!t||!o||!c){e.status(400).json({success:!1,error:"Algumas dessas informa\xE7\xF5es n\xE3o foram fornecidas: dbName, id, nameModel e collectionName."});return}try{let{getDocumentById:n}=await f(r,c,o),l=await n(t);e.json({success:!0,data:l})}catch(n){e.status(500).json({success:!1,error:n.message})}});var A=N;import G from"express";var _=G.Router();_.delete("/",async(a,e)=>{let{collectionName:o,dbName:r,id:t,nameModel:c}=a.query;if(!t||!o||!o||!r){e.status(400).json({success:!1,error:"Algumas dessas informa\xE7\xF5es n\xE3o foram fornecidas: id, nameModel, collectionName, dbName."});return}try{let{deleteDocumentById:n}=await f(r,c,o),l=await n(t);e.status(200).json(l)}catch(n){e.status(500).json({success:!1,error:n.message})}});var x=_;import z from"express";var v=z.Router();v.put("/",async(a,e)=>{let o=a.query,{dbName:r,nameModel:t,schema:c,collectionName:n,data:l}=a.body;if(!r||!t||!c||!n||!l){e.status(400).json({success:!1,error:"Algumas dessas informa\xE7\xF5es n\xE3o foram fornecidas: dbName, nameModel, schema, collectionName, data"});return}});var B=v;var p=$.Router();p.get("/",(a,e)=>{e.send("API Sequoia")});p.use("/api/verify-token",R);p.use("/api/mongodb/add",b);p.use("/api/mongodb/get",A);p.use("/api/mongodb/delete",x);p.use("/api/mongodb/update",B);var S=p;var D=j();D.use(H({origin:process.env.ALLOWED_ORIGINS,credentials:!0,methods:["GET","POST","PUT","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization"]}));D.use(j.json());T();D.use("/",S);D.listen(process.env.PORT,()=>{console.log(`API rodando na porta ${process.env.PORT}`)});
