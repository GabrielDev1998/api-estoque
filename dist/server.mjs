import S from"express";import J from"cors";import*as l from"firebase-admin";var w=()=>{l.apps.length===0&&l.initializeApp({credential:l.credential.cert({clientEmail:process.env.FIREBASE_CLIENT_EMAIL,privateKey:process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g,`
`),projectId:process.env.FIREBASE_PROJECT_ID})})};import"dotenv/config";import $ from"express";import k from"express";function L(){return{verifyToken:async e=>{try{let o=await l.auth().verifyIdToken(e);return{uid:o.uid,email:o.email,iat:o.iat,exp:o.exp}}catch(o){throw console.error("Token inv\xE1lido:",o),new Error("Token inv\xE1lido.")}}}}var D=L;var I=k.Router(),{verifyToken:C}=D();I.get("/",async(s,e)=>{let o=s.headers.authorization;if(!o){e.status(401).json({success:!1,error:"Token n\xE3o fornecido."});return}try{let t=o.split("Bearer ")[1],r=await C(t);e.status(200).json({success:!0,user:r})}catch(t){console.error("Token inv\xE1lido:",t),e.status(401).json({success:!1,error:"Token inv\xE1lido ou expirado."});return}});var O=I;import V from"express";import N,{Schema as P}from"mongoose";import E from"mongoose";var F=async(s,e)=>{try{E.connection.readyState===0?(console.log("Conectando ao MongoDB..."),await E.connect(s,{dbName:e}),console.log(`Conectado ao MongoDB na base de dados "${e}"`)):E.connection.readyState===1?console.log("J\xE1 conectado ao MongoDB"):E.connection.readyState===2?console.log("Conex\xE3o com MongoDB est\xE1 em progresso..."):E.connection.readyState===3&&console.log("Desconectando do MongoDB...")}catch(o){throw console.error("Erro ao se conectar ao banco de dados:",o),new Error("Falha ao se conectar ao banco de dados")}},M=F;var i={INVALID_ID:"ID inv\xE1lido.",DOCUMENT_NOT_FOUND:"Documento n\xE3o encontrado.",CREATE_ERROR:"Erro ao criar documento.",UPDATE_ERROR:"Erro ao atualizar documento.",DELETE_ERROR:"Erro ao excluir documento.",LIST_ERROR:"Erro ao listar documentos."};async function q(s,e,o){let t=process.env.MONGODB_URL;if(!t)throw new Error("Vari\xE1vel de ambiente MONGODB_URL n\xE3o encontrada.");await M(t,s);let r=async c=>{try{return N.models[e]||N.model(e,new P(c),o)}catch(d){throw console.error("Erro ao validar o modelo",d.message),new Error("Falha ao validar o modelo")}},n=c=>N.Types.ObjectId.isValid(c),a=(c,d)=>{throw console.error(`Erro ao executar opera\xE7\xE3o: ${c}`,d.message),new Error(c)};return{createDocument:async(c,d)=>{try{let m=await r(c);return{success:!0,data:await new m(d).save()}}catch(m){return a(i.CREATE_ERROR,m),{success:!1,error:i.CREATE_ERROR}}},getAllDocument:async()=>{try{return{success:!0,data:await(await r()).find()}}catch(c){return a(i.LIST_ERROR,c),{success:!1,error:i.LIST_ERROR}}},getDocumentById:async c=>{if(!n(c))throw new Error(i.INVALID_ID);try{let m=await(await r()).findById(c);if(!m)throw new Error(i.DOCUMENT_NOT_FOUND);return{success:!0,data:m}}catch(d){return a(i.DOCUMENT_NOT_FOUND,d),{success:!1,error:i.DOCUMENT_NOT_FOUND}}},updateDocumentById:async(c,d)=>{if(!n(c))throw new Error(i.INVALID_ID);try{let R=await(await r()).findByIdAndUpdate(c,d,{new:!0});if(!R)throw new Error(i.DOCUMENT_NOT_FOUND);return{success:!0,data:R}}catch(m){return a(i.UPDATE_ERROR,m),{success:!1,error:i.UPDATE_ERROR}}},deleteDocumentById:async c=>{if(!n(c))throw new Error(i.INVALID_ID);try{let m=await(await r()).findByIdAndDelete(c);if(!m)throw new Error(i.DOCUMENT_NOT_FOUND);return{success:!0,data:m}}catch(d){return a(i.DELETE_ERROR,d),{success:!1,error:i.DELETE_ERROR}}}}}var f=q;var _=V.Router();_.post("/",async(s,e)=>{let{collectionName:o,schema:t,dbName:r,data:n,nameModel:a}=s.body;if(!t||!n||!r||!a){e.status(400).json({success:!1,error:"Par\xE2metros inv\xE1lidos. Envie schema, data, dbName, nameModel, collectionName (OPCIONAL)"});return}try{let{createDocument:u}=await f(r,a,o),T=await u(t,n);e.status(200).json(T)}catch(u){console.error(u),e.status(500).json({success:!1,error:"Erro ao adicionar documento."})}});var A=_;import z from"express";var h=z.Router();h.get("/all",async(s,e)=>{let{collectionName:o,dbName:t,nameModel:r}=s.query;if(!t||!r||!o){e.status(400).json({success:!1,error:"Algumas dessas informa\xE7\xF5es n\xE3o foram fornecidas: dbName, nameModel e collectionName."});return}try{let{getAllDocument:n}=await f(t,r,o),a=await n();e.json(a)}catch(n){e.status(500).json({success:!1,error:n.message})}});h.get("/",async(s,e)=>{let{collectionName:o,dbName:t,id:r,nameModel:n}=s.query;if(!t||!r||!o||!n){e.status(400).json({success:!1,error:"Algumas dessas informa\xE7\xF5es n\xE3o foram fornecidas: dbName, id, nameModel e collectionName."});return}try{let{getDocumentById:a}=await f(t,n,o),u=await a(r);e.json(u)}catch(a){e.status(500).json({success:!1,error:a.message})}});var b=h;import G from"express";var v=G.Router();v.delete("/",async(s,e)=>{let{collectionName:o,dbName:t,id:r,nameModel:n}=s.query;if(!r||!o||!o||!t){e.status(400).json({success:!1,error:"Algumas dessas informa\xE7\xF5es n\xE3o foram fornecidas: id, nameModel, collectionName, dbName."});return}try{let{deleteDocumentById:a}=await f(t,n,o),u=await a(r);e.status(200).json(u)}catch(a){e.status(500).json({success:!1,error:a.message})}});var x=v;import H from"express";var B=H.Router();B.put("/",async(s,e)=>{let o=s.query,{dbName:t,nameModel:r,schema:n,collectionName:a,data:u}=s.body;if(!t||!r||!n||!a||!u){e.status(400).json({success:!1,error:"Algumas dessas informa\xE7\xF5es n\xE3o foram fornecidas: dbName, nameModel, schema, collectionName, data"});return}});var j=B;var g=async(s,e,o)=>{let r=s.headers.authorization?.split(" ")[1];if(!r){e.status(401).json({success:!1,error:"Token n\xE3o fornecido"});return}try{let{verifyToken:n}=D();await n(r),o()}catch(n){console.error(n),e.status(401).json({valid:!1,error:"Token inv\xE1lido ou expirado"});return}};var p=$.Router();p.get("/",async(s,e)=>{e.send("API Sequoia")});p.use("/api/verify-token",O);p.use("/api/mongodb/add",g,A);p.use("/api/mongodb/get",g,b);p.use("/api/mongodb/delete",g,x);p.use("/api/mongodb/update",g,j);var U=p;var y=S();y.use(J({origin:process.env.ALLOWED_ORIGINS,credentials:!0,methods:["GET","POST","PUT","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization"]}));y.use(S.json());w();y.use("/",U);y.listen(process.env.PORT,()=>{console.log(`API rodando na porta ${process.env.PORT}`)});
